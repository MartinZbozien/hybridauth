<?php
/**
 * 
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hybridauth_bonus_form_hybridauth_admin_settings_alter(&$form, &$form_state, $form_id) {
  $roles = user_roles(TRUE);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  if ($roles) {
    $form['vtabs']['fset_bonus_roles'] = array(
      '#type' => 'fieldset',
      '#title' => t('HybridAuth Bonus') . ': ' . t('Roles'),
    );
    $form['vtabs']['fset_bonus_roles']['hybridauth_bonus_registration_role_choice'] = array(
      '#type' => 'checkbox',
      '#title' => t('Suggest role choice when registering'),
      '#description' => t('Allow users to choose their roles when registering through HybridAuth.'),
      '#default_value' => variable_get('hybridauth_bonus_registration_role_choice', 0),
    );
    $form['vtabs']['fset_bonus_roles']['hybridauth_bonus_registration_roles'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Roles to choose from'),
      '#description' => t('Select roles to suggest to new users when registering through HybridAuth.'),
      '#options' => $roles,
      '#default_value' => variable_get('hybridauth_bonus_registration_roles', array()),
      '#states' => array(
        'visible' => array(
          ':input[name="hybridauth_bonus_registration_role_choice"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
  
  $form['vtabs']['fset_bonus_forms'] = array(
    '#type' => 'fieldset',
    '#title' => t('HybridAuth Bonus') . ': ' . t('Forms'),
  );
  $form['vtabs']['fset_bonus_forms']['hybridauth_bonus_customize_widget_per_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Customize HybridAuth widget per form'),
    //'#description' => t(''),
    '#default_value' => variable_get('hybridauth_bonus_customize_widget_per_form', 0),
  );
  foreach (_hybridauth_forms_list() as $f_id => $f_title) {
    $form['vtabs']['fset_bonus_forms'][$f_id] = array(
      '#type' => 'fieldset',
      '#title' => $f_title,
      '#collapsible' => TRUE,
      //'#collapsed' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="hybridauth_bonus_customize_widget_per_form"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['vtabs']['fset_bonus_forms'][$f_id]['hybridauth_bonus_widget_title_' . $f_id] = array(
      '#type' => 'textfield',
      '#title' => t('Widget title'),
      '#default_value' => variable_get('hybridauth_bonus_widget_title_' . $f_id, 'Or log in with...'),
    );
    
    
    $options = array();
    foreach (hybridauth_get_icon_packs() as $name => $icon_pack) {
      $options[$name] = $icon_pack['title'];
    }
    $form['vtabs']['fset_bonus_forms'][$f_id]['hybridauth_bonus_widget_icon_pack_' . $f_id] = array(
      '#type' => 'select',
      '#title' => t('Icon package'),
      '#options' => $options,
      '#default_value' => variable_get('hybridauth_bonus_widget_icon_pack_' . $f_id, 'hybridauth_32'),
    );
    $form['vtabs']['fset_bonus_forms'][$f_id]['hybridauth_bonus_widget_weight_' . $f_id] = array(
      '#type' => 'weight',
      '#title' => t('Widget weight'),
      '#delta' => 100,
      '#description' => t('Determines the order of the elements on the form - heavier elements get positioned later.'),
      '#default_value' => variable_get('hybridauth_bonus_widget_weight_' . $f_id, 100),
    );
  }
}

/**
 * Implements hook_hybridauth_registration_form().
 */
function hybridauth_bonus_hybridauth_registration_form($data) {
  if (empty($data['roles']) && variable_get('hybridauth_bonus_registration_role_choice', 0)) {
    return TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hybridauth_bonus_form_hybridauth_additional_info_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('hybridauth_bonus_registration_role_choice', 0)) {
    //$form['#validate'][] = 'hybridauth_bonus_form_hybridauth_additional_info_form_validate';
    array_unshift($form['#submit'], 'hybridauth_bonus_form_hybridauth_additional_info_form_submit');
    $roles = array_intersect_key(user_roles(TRUE), array_filter(variable_get('hybridauth_bonus_registration_roles', array())));
    $form['fset']['roles'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Roles'),
      '#options' => $roles,
    );
  }
}

/*function hybridauth_bonus_form_hybridauth_additional_info_form_validate($form, &$form_state) {
  
}*/

function hybridauth_bonus_form_hybridauth_additional_info_form_submit($form, &$form_state) {
  if (isset($form_state['values']['roles'])) {
    $form_state['values']['data']['roles'] = $form_state['values']['roles'];
    $form_state['values']['data']['manual'][] = 'roles';
  }
}

/**
 * Implements hook_hybridauth_userinfo_alter().
 */
function hybridauth_bonus_hybridauth_userinfo_alter(&$userinfo, $data) {
  if (array_key_exists('roles', $data)) {
    $userinfo['roles'] = $data['roles'];
  }
}

/**
 * Implements hook_form_alter().
 */
function hybridauth_bonus_form_alter(&$form, &$form_state, $form_id) {
  _hybridauth_bonus_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hybridauth_bonus_form_comment_form_alter(&$form, &$form_state, $form_id) {
  _hybridauth_bonus_form_alter($form, $form_state, 'comment_form');
}

function _hybridauth_bonus_form_alter(&$form, &$form_state, $form_id) {
  if (!variable_get('hybridauth_bonus_customize_widget_per_form', 0)) {
    return;
  }
  if (isset($form['hybridauth'])) {
    $form['hybridauth']['#title'] = variable_get('hybridauth_bonus_widget_title_' . $form_id, 'Or log in with...');
    $form['hybridauth']['#hybridauth_widget_icon_pack'] = variable_get('hybridauth_bonus_widget_icon_pack_' . $form_id, 'hybridauth_32');
    $form['hybridauth']['#weight'] = variable_get('hybridauth_bonus_widget_weight_' . $form_id, 100);
  }
}
